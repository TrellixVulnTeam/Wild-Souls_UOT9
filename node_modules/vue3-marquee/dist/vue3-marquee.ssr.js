'use strict';var vue=require('vue');function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}var _hoisted_1 = {
  key: 0
};
var _hoisted_2 = {
  key: 0,
  class: "overlay"
};
var _hoisted_3 = {
  class: "marquee"
};
var script = /*#__PURE__*/vue.defineComponent({
  props: {
    direction: {
      type: String,
      required: false,
      default: "normal"
    },
    duration: {
      type: Number,
      required: false,
      default: 20
    },
    delay: {
      type: Number,
      required: false,
      default: 0
    },
    loop: {
      type: Number,
      required: false,
      default: 0
    },
    clone: {
      type: Boolean,
      required: false,
      default: false
    },
    gradient: {
      type: Boolean,
      required: false,
      default: false
    },
    gradientColor: {
      type: Array,
      required: false,
      default: [255, 255, 255],
      validator: function validator(value) {
        if (value.length != 3) {
          return false;
        }

        if (typeof value[0] !== "number" || value[0] < 0 || value[0] > 255) {
          return false;
        }

        if (typeof value[1] !== "number" || value[1] < 0 || value[1] > 255) {
          return false;
        }

        if (typeof value[2] !== "number" || value[2] < 0 || value[2] > 255) {
          return false;
        }

        return true;
      }
    },
    gradientWidth: {
      type: String,
      required: false,
      default: "200px"
    },
    pauseOnHover: {
      type: Boolean,
      required: false,
      default: false
    },
    pauseOnClick: {
      type: Boolean,
      required: false,
      default: false
    }
  },
  setup: function setup(__props) {
    var props = __props;
    var cloneAmount = vue.ref(0);
    var minWidth = vue.ref("100%");
    var componentKey = vue.ref(0);
    var containerWidth = vue.ref(0);
    var contentWidth = vue.ref(0);
    var ready = vue.ref(false);
    var marqueeContent = vue.ref(null);
    var marqueeContainer = vue.ref(null);

    var ForcesUpdate = function ForcesUpdate() {
      componentKey.value++;
    };

    var checkForClone = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                setInterval(function () {
                  minWidth.value = "0%";

                  if (marqueeContent.value !== null && marqueeContainer.value !== null) {
                    if (marqueeContent.value && marqueeContainer.value) {
                      if ("clientWidth" in marqueeContent.value && "clientWidth" in marqueeContainer.value) {
                        contentWidth.value = marqueeContent.value.clientWidth;
                        containerWidth.value = marqueeContainer.value.clientWidth;
                        var localCloneAmount = Math.ceil(containerWidth.value / contentWidth.value);
                        cloneAmount.value = isFinite(localCloneAmount) ? localCloneAmount : 0;
                        return cloneAmount.value;
                      } else {
                        minWidth.value = "100%";
                        return 0;
                      }
                    } else {
                      minWidth.value = "100%";
                      return 0;
                    }
                  } else {
                    minWidth.value = "100%";
                    return 0;
                  }
                }, 100);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function checkForClone() {
        return _ref.apply(this, arguments);
      };
    }();

    vue.watch(contentWidth, function () {
      if (props.clone) {
        ForcesUpdate();
      }
    });
    vue.watch(containerWidth, function () {
      if (props.clone) {
        ForcesUpdate();
      }
    });
    var getCurrentStyle = vue.computed(function () {
      var cssVariables = {
        "--duration": "".concat(props.duration, "s"),
        "--delay": "".concat(props.delay, "s"),
        "--direction": "".concat(props.direction),
        "--pauseOnHover": "".concat(props.pauseOnHover ? "paused" : "running"),
        "--pauseOnClick": "".concat(props.pauseOnClick ? "paused" : "running"),
        "--loops": "".concat(props.loop === 0 ? "infinite" : props.loop),
        "--gradient-color": "rgba(".concat(props.gradientColor[0], ", ").concat(props.gradientColor[1], ", ").concat(props.gradientColor[2], ", 1), rgba(").concat(props.gradientColor[0], ", ").concat(props.gradientColor[1], ", ").concat(props.gradientColor[2], ", 0)"),
        "--gradient-width": "".concat(props.gradientWidth),
        "--min-width": "".concat(minWidth.value)
      };
      return cssVariables;
    });
    var showGradient = vue.computed(function () {
      if (props.gradient) {
        return true;
      }

      return false;
    });

    var setupMarquee = /*#__PURE__*/function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!props.clone) {
                  _context2.next = 7;
                  break;
                }

                _context2.next = 3;
                return checkForClone();

              case 3:
                ForcesUpdate();
                ready.value = true;
                _context2.next = 8;
                break;

              case 7:
                ready.value = true;

              case 8:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      return function setupMarquee() {
        return _ref2.apply(this, arguments);
      };
    }();

    vue.onMounted(setupMarquee);
    return function (_ctx, _cache) {
      return vue.unref(ready) ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_1, [(vue.openBlock(), vue.createElementBlock("div", {
        class: "vue3-marquee",
        style: vue.normalizeStyle(vue.unref(getCurrentStyle)),
        key: vue.unref(componentKey)
      }, [vue.createElementVNode("div", {
        class: "transparent-overlay",
        ref: function ref(_value, _refs) {
          _refs['marqueeContainer'] = _value;
          vue.isRef(marqueeContainer) ? marqueeContainer.value = _value : marqueeContainer = _value;
        }
      }, null, 512), vue.unref(showGradient) ? (vue.openBlock(), vue.createElementBlock("div", _hoisted_2)) : vue.createCommentVNode("", true), vue.createElementVNode("div", {
        class: "marquee",
        ref: function ref(_value, _refs) {
          _refs['marqueeContent'] = _value;
          vue.isRef(marqueeContent) ? marqueeContent.value = _value : marqueeContent = _value;
        }
      }, [vue.renderSlot(_ctx.$slots, "default")], 512), vue.createElementVNode("div", _hoisted_3, [vue.renderSlot(_ctx.$slots, "default")]), (vue.openBlock(true), vue.createElementBlock(vue.Fragment, null, vue.renderList(vue.unref(cloneAmount), function (num) {
        return vue.openBlock(), vue.createElementBlock("div", {
          class: "marquee cloned",
          key: num
        }, [vue.renderSlot(_ctx.$slots, "default")]);
      }), 128))], 4))])) : vue.createCommentVNode("", true);
    };
  }
});function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}var css_248z = "\n.vue3-marquee {\r\n  overflow-x: hidden !important;\r\n  display: flex !important;\r\n  flex-direction: row !important;\r\n  position: relative;\r\n  width: 100%;\n}\n.vue3-marquee:hover div {\r\n  animation-play-state: var(--pauseOnHover);\n}\n.vue3-marquee:active div {\r\n  animation-play-state: var(--pauseOnClick);\n}\n.marquee {\r\n  flex: 0 0 auto;\r\n  min-width: var(--min-width);\r\n  z-index: 1;\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  animation: scroll var(--duration) linear var(--delay) var(--loops);\r\n  animation-direction: var(--direction);\n}\n@keyframes scroll {\n0% {\r\n    transform: translateX(0%);\n}\n100% {\r\n    transform: translateX(-100%);\n}\n}\n.overlay {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\n}\n.transparent-overlay {\r\n  position: absolute;\r\n  width: 100%;\r\n  height: 100%;\n}\n.overlay::before,\r\n.overlay::after {\r\n  background: linear-gradient(to right, var(--gradient-color));\r\n  content: \"\";\r\n  height: 100%;\r\n  position: absolute;\r\n  width: var(--gradient-width);\r\n  z-index: 2;\n}\n.overlay::after {\r\n  right: 0;\r\n  top: 0;\r\n  transform: rotateZ(180deg);\n}\n.overlay::before {\r\n  left: 0;\r\n  top: 0;\n}\r\n";
styleInject(css_248z);// Import vue component
// IIFE injects install function into component, allowing component
// to be registered via Vue.use() as well as Vue.component(),

var component = /*#__PURE__*/(function () {
  // Get component instance
  var installable = script; // Attach install function executed by Vue.use()

  installable.install = function (app) {
    app.component("Vue3Marquee", installable);
  };

  return installable;
})(); // It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = directive;
var namedExports=/*#__PURE__*/Object.freeze({__proto__:null,'default':component});// only expose one global var, with named exports exposed as properties of
// that global var (eg. plugin.namedExport)

Object.entries(namedExports).forEach(function (_ref) {
  var _ref2 = _slicedToArray(_ref, 2),
      exportName = _ref2[0],
      exported = _ref2[1];

  if (exportName !== "default") component[exportName] = exported;
});module.exports=component;